@precedence {
  else @left,
  member,
  newArgs,
  call,
  taggedTemplate,
  prefix,
  postfix,
  typeof,
  exp @left,
  times @left,
  plus @left,
  shift @left,
  loop,
  rel @left,
  equal @left,
  bitOr @left,
  bitXor @left,
  bitAnd @left,
  and @left,
  or @left,
  ternary @left,
  assign @left,
  comma @left,
  statement @cut
}

@top Script { semiSep<statement> }

Scope {
  ArrayPattern? Destroy? "{" semiSep<statement> "}"
}

Fn {
  Destroy ArrayPattern expressionNoComma
}

statement {
  declaration |
  ExpressionStatement { expressionNoComma }
}

declaration {
  VariableDeclaration
}

VariableDeclaration {
  kw<"let"> commaSep1<patternAssign>
}

pattern { VariableDefinition | ArrayPattern }

ArrayPattern { "[" semiSep<"..."? patternAssign> ~destructure "]" }

patternAssign {
  pattern ("=" expressionNoComma)?
}

expression {
  expressionNoComma | SequenceExpression
}

SequenceExpression {
  expressionNoComma !comma ("," expressionNoComma)+
}

expressionNoComma {
  Number |
  String |
  VariableName |
  boolean |
  ArrayExpression |
  Scope |
  Fn
}

ArrayExpression {
  "[" semiSep<"..."? expressionNoComma | ""> ~destructure "]"
}

commaSep<content> {
  "" | content ("," content?)*
}

commaSep1<content> {
  content ("," content)*
}

semiSep<content> {
  "" | content (";" content?)*
}

// Keywords

kw<term> { @specialize[name={term}]<identifier, term> }

// Contextual keyword in property context

boolean { @specialize[name=BooleanLiteral]<identifier, "true" | "false"> }

Destroy { "!" }

Star { "*" }

VariableName { identifier ~arrow }

VariableDefinition { identifier ~arrow }

Label { identifier }

@skip { whitespace | LineComment | BlockComment }

@tokens {
  whitespace { std.whitespace+ }

  LineComment { "//" ![\n]* }

  BlockComment { "/*" blockCommentRest }

  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }

  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

  @precedence { BlockComment, LineComment }

  identifierChar { std.asciiLetter | $[_$\u{a1}-\u{10ffff}] }

  word { identifierChar (identifierChar | std.digit)* }

  identifier { word }

  @precedence { identifier, whitespace }

  @precedence { word, whitespace }

  Number {
    (std.digit+ ("." std.digit*)? | "." std.digit+) (("e" | "E") ("+" | "-")? std.digit+)? |
    "0x" (std.digit | $[a-fA-F])+ |
    "0b" $[01]+ |
    "0o" $[0-7]+
  }

  String {
    '"' (![\\\n"] | "\\" _)* '"'? |
    "'" (![\\\n'] | "\\" _)* "'"?
  }

  ArithOp<expr> { expr }
  LogicOp<expr> { expr }
  BitOp<expr> { expr }
  CompareOp<expr> { expr }
  UpdateOp<expr> { expr }

  RegExp { "/" (![/\\\n[] | "\\" ![\n] | "[" (![\n\\\]] | "\\" ![\n])* "]")+ ("/" $[gimsuy]*)? }

  "="[name=Equals]
  "..."[name=Spread]
  "=>"[name=Arrow]

  "(" ")" "[" "]" "{" "}"

  "?." "." "," ";" ":"
}

@detectDelim
